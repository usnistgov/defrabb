################################################################################
# Pipeline configuration overview
#
# This is an example config file that controls how hap.py and the variant caller
# (which for now is only dipcall) are run. See each section below for a
# walkthough and explanation of each option
#
# General notes:
# - while not implemented yet, any URL field should theoretically allow
#   filesystem urls (eg file://blablabla) to allow local preprocessing if
#   desired

analyses: "config/analyses.tsv"

################################################################################
# References
#
# TODO add some nice docs here

# TODO not sure if the strats should go here or not
references:
  GRCh37:
    ref_url: "ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/reference/phase2_reference_assembly_sequence/hs37d5.fa.gz"
    par_bed: "hs37d5.PAR.bed"
  GRCh38:
    ref_url: "ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz"
    par_bed: "hs38.PAR.bed"
  ## For testing
  GRCh38_chr21:
    ref_url: "local_file"
    par_bed: "hs38.PAR.bed"

################################################################################
# Assemblies
#
# This pipeline is designed for diploid assemblies, and thus the maternal and
# paternal assemblies must be specified.
#
# In the entry below we define one assembly by specifying URLs pointing to the
# maternal/paternal FASTA files as well as a flag specifying if this assembly is
# male (which will be used downstream by the variant caller). We give this
# assembly a unique identifier, 'asm-foo', which will be use to refer to this
# assembly in the output and in subsequent steps.

assemblies:
  HG2-HPRC-20210804:
    maternal: https://s3-us-west-2.amazonaws.com/human-pangenomics/submissions/6AA58BE2-3710-4B27-AB6A-BEC23DBA14A2--RU-HG002-cleaned/HG002/assemblies/bakeoff/ru_scaffolded/HG002.mat.gap_filled_scaff.cleaned.fa.gz
    paternal: https://s3-us-west-2.amazonaws.com/human-pangenomics/submissions/6AA58BE2-3710-4B27-AB6A-BEC23DBA14A2--RU-HG002-cleaned/HG002/assemblies/bakeoff/ru_scaffolded/HG002.pat.gap_filled_scaff.cleaned.fa.gz
    is_male: true
  HG2-HPRC-20211005:
    maternal: https://s3-us-west-2.amazonaws.com/human-pangenomics/submissions/21edcb42-02c4-4e9f-b226-6773e62484a4--RU-HG002-commons/assembly/curated_round2/HG002.mat.cur.20211005.fasta.gz
    paternal: https://s3-us-west-2.amazonaws.com/human-pangenomics/submissions/21edcb42-02c4-4e9f-b226-6773e62484a4--RU-HG002-commons/assembly/curated_round2/HG002.pat.cur.20211005.fasta.gz
    is_male: true   
  HG2-hifiasm_v0.11:
    maternal: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/CMRG_v1.00/hifiasm-assembly/HG002-v0.11.mat.fa.gz
    paternal: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/CMRG_v1.00/hifiasm-assembly/HG002-v0.11.pat.fa.gz
    is_male: true
  asm17aChr21:
    maternal: https://giab-data.s3.amazonaws.com/giab-test-data/asm17aChr21/maternal.fa.gz
    paternal: https://giab-data.s3.amazonaws.com/giab-test-data/asm17aChr21/paternal.fa.gz
    is_male: true

# We can specify additional assemblies like this
# asm-another:
#   maternal: https://another-maternal.fa
#   paternal: https://another-paternal.fa
#   is_male: false

################################################################################
# Benchmarks
#
# We specify a benchmark to use by supplying URLs to the .vcf and .bed files,
# which will be used as truth inputs to hap.py downstream. We label this
# benchmark with a unique identifier ('bmk-foo') that will be used to refer to
# this benchmark in downstream steps.

comparisons:
  v4.2.1:
    vcf_url: http://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/latest/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz
    bed_url: http://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/latest/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed
    tbi_url: http://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/latest/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz.tbi
  smvar-CMRG-v1.0:
    vcf_url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/CMRG_v1.00/GRCh38/SmallVariant/HG002_GRCh38_CMRG_smallvar_v1.00.vcf.gz
    bed_url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/CMRG_v1.00/GRCh38/SmallVariant/HG002_GRCh38_CMRG_smallvar_v1.00.bed
    tbi_url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/CMRG_v1.00/GRCh38/SmallVariant/HG002_GRCh38_CMRG_smallvar_v1.00.vcf.gz.tbi
  SV-CMRG-v1.0:
    vcf_url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/CMRG_v1.00/GRCh38/StructuralVariant/HG002_GRCh38_CMRG_SV_v1.00.vcf.gz
    bed_url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/CMRG_v1.00/GRCh38/StructuralVariant/HG002_GRCh38_CMRG_SV_v1.00.bed
    tbi_url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/CMRG_v1.00/GRCh38/StructuralVariant/HG002_GRCh38_CMRG_SV_v1.00.vcf.gz.tbi
  # like v4.2.1 but with a different vcf
  hifi-v4.2.1:
    vcf_url: https://nist-midas.s3.amazonaws.com/pdrsrv/mds2-2336/submission_vcfs/B1S5A/B1S5A_HG002.vcf.gz
    bed_url: http://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/latest/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed
    ## TODO - this is not the correct url for this vcfs index file, it probably isn't only
    tbi_url: http://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/latest/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz.tbi
  ## For testing - will want to create urls for testing
  v4.2.1chr21:
    vcf_url: https://giab-data.s3.amazonaws.com/giab-test-data/benchmarksets/HG002/v4.2.1chr21.vcf.gz
    bed_url: https://giab-data.s3.amazonaws.com/giab-test-data/benchmarksets/HG002/v4.2.1chr21.bed
    tbi_url: https://giab-data.s3.amazonaws.com/giab-test-data/benchmarksets/HG002/v4.2.1chr21.vcf.gz.tbi

# We can specify additional benchmarks like this

# bmk-another:
#   vcf_url: http://another.vcf
#   bed_url: http://another.bed
    
################################################################################
# Beds for generating exclusions

exclusion_beds:
  homopolymers: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v2.0/GRCh38/LowComplexity/GRCh38_AllTandemRepeatsandHomopolymers_slop5.bed.gz
  segdups: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v2.0/GRCh38/SegmentalDuplications/GRCh38_segdups.bed.gz
  tandem_repeats: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.0/GRCh38/LowComplexity/GRCh38_AllTandemRepeats_gt10000bp_slop5.bed.gz
  gaps: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.0/GRCh38/OtherDifficult/GRCh38_gaps_slop15kb.bed.gz
  self_chains: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.0/GRCh38/SegmentalDuplications/GRCh38_chainSelf.bed.gz

exclusion_set:
  smvarall:
    - segdups_start.bed
    - segdups_end.bed
    - tandem_repeats_start.bed
    - tandem_repeats_end.bed
    - satellites_end.bed
    - gaps.bed
    - self_chains_start.bed
    - self_chains_end.bed
    - flanks.bed
    - structural_variants.bed
  stvarall:
    - segdups_start.bed
    - segdups_end.bed
    - tandem_repeats_start.bed
    - tandem_repeats_end.bed
    - satellites_end.bed
    - gaps.bed
    - self_chains_start.bed
    - self_chains_end.bed
    - flanks.bed

# exclusions:
#   exclude_SVs:
#     bedfile: HG002v11-align2-GRCh38.dip_SVsgt49bp.bed
#     # md5: 
#     description: |
#       SVs and overlapping tandem repeats and hompolymers
#     justification: |
#       Because hap.py+vcfeval doesn't currently handle different representations
#       of small variants around SVs

#   exclude_segdups:
#     bedfile(s): GRCh38_segdups_intersecting_dip_start_slop15kb.bed and GRCh38_segdups_intersecting_dip_end_slop15kb.bed 
#     # md5: 
#     description: |
#       partially covered segmental duplications + 15kb slop on each side
#     justification: |
#       Because breaks in aligning the assembly to segmental duplications
#       indicate potential assembly errors and/or large SVs or CNVs where small
#       variants can't be benchmarked accurately

#   exclude_TR_gt10000bp:
#     bedfile(s): GRCh38_AllTandemRepeats_gt10000bp_intersecting_dip_start_slop15kb.bed and GRCh38_AllTandemRepeats_gt10000bp_intersecting_dip_end_slop15kb.bed 
#     # md5: 
#     description: |
#       partially covered tandem repeats longer than 10kb + 15kb slop on each side
#     justification: Because breaks in aligning the assembly to long tandem repeats indicate potential assembly errors and/or large SVs or CNVs where small variants can't be benchmarked accurately

#   exclude_gaps:
#     bedfile: GRCh38_gaps_slop15kb.bed.gz
#     # md5: 
#     description: gaps in GRCh38 + 15kb slop
#     justification: |
#       Because there are often SVs and other alignment issues around gaps in
#       the reference, exclude all gaps in GRCh38 + 15kb slop

#   exclude_self_chains:
#     bedfile(s): GRCh38_chainSelf_intersecting_dip_start_slop15kb.bed and GRCh38_chainSelf_intersecting_dip_end_slop15kb.bed
#     # md5: 
#     description: self chains with potential assembly errors
#     justification: |
#       Because breaks in aligning the assembly to self chains indicate potential
#       assembly errors and/or large SVs or CNVs where small variants can't
#       be benchmarked accurately


################################################################################
# internal

## Dipcall Resources ##############
# the number of dipcall threads to use
_dipcall_threads: 1

# the root of the par file for dipcall (and friends)
_par_bed_root: data/par_bed

## Happy Resources ################
happy_mem: 64G
happy_threads: 4

# Statifications
stratifications:
    GRCh38:
      id: "v3.0-stratifications-GRCh38"
      url: "ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.0/v3.0-stratifications-GRCh38.tar.gz"
      tarball: "v3.0-stratifications-GRCh38.tar.gz"
      tsv: "v3.0-GRCh38-all-stratifications.tsv"

################################################################################
# Pipeline configuration overview
#
# This is an example config file that controls how hap.py and the variant caller
# (which for now is only dipcall) are run. See each section below for a
# walkthough and explanation of each option
#
# General notes:
# - while not implemented yet, any URL field should theoretically allow
#   filesystem urls (eg file://blablabla) to allow local preprocessing if
#   desired

################################################################################
# References
#
# TODO add some nice docs here

# TODO not sure if the strats should go here or not
references:
  GRCh37:
    ref_url: "ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/reference/phase2_reference_assembly_sequence/hs37d5.fa.gz"
    par_bed: "hs37d5.PAR.bed"
  GRCh38:
    ref_url: "ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz"
    par_bed: "hs38.PAR.bed"

################################################################################
# Assemblies
#
# This pipeline is designed for diploid assemblies, and thus the maternal and
# paternal assemblies must be specified.
#
# In the entry below we define one assembly by specifying URLs pointing to the
# maternal/paternal FASTA files as well as a flag specifying if this assembly is
# male (which will be used downstream by the variant caller). We give this
# assembly a unique identifier, 'asm-foo' (which must start with 'asm-'), which
# will be use to refer to this assembly in the output and in subsequent steps.

assemblies:
  asm-foo:
    maternal: https://s3-us-west-2.amazonaws.com/human-pangenomics/submissions/6AA58BE2-3710-4B27-AB6A-BEC23DBA14A2--RU-HG002-cleaned/HG002/assemblies/bakeoff/ru_scaffolded/HG002.mat.gap_filled_scaff.cleaned.fa.gz
    paternal: https://s3-us-west-2.amazonaws.com/human-pangenomics/submissions/6AA58BE2-3710-4B27-AB6A-BEC23DBA14A2--RU-HG002-cleaned/HG002/assemblies/bakeoff/ru_scaffolded/HG002.pat.gap_filled_scaff.cleaned.fa.gz
    is_male: true

# We can specify additional assemblies like this
# asm-another:
#   maternal: https://another-maternal.fa
#   paternal: https://another-paternal.fa
#   is_male: false

################################################################################
# Benchmarks
#
# We specify a benchmark to use by supplying URLs to the .vcf and .bed files,
# which will be used as truth inputs to hap.py downstream. We label this
# benchmark with a unique identifier ('bmk-foo') that will be used to refer to
# this benchmark in downstream steps. The identifier must start with 'bmk-'.

benchmarks:
  bmk-foo:
    vcf_url: http://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/latest/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz
    bed_url: http://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/latest/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed
    tbi_url: http://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/latest/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz.tbi

# We can specify additional benchmarks like this

# bmk-another:
#   vcf_url: http://another.vcf
#   bed_url: http://another.bed

################################################################################
# internal

# the number of dipcall threads to use
_dipcall_threads: 1

# the root of the par file for dipcall (and friends)
_par_bed_root: data/par_bed

# the root directory holding the statifications
_strats_root: ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications

################################################################################
# Extra config (these were once part of this yaml file but were deemed more
# appropriate to include in analyses.tsv)

################################################################################
# Variant Caller
#
# We specify several runs for the variant caller runs to invoke. Each variant
# caller is identified by a key starting with 'vcr-' ('vcr-foo' and 'vcr-boo'
# below). The key 'assemblies' is a list of strings specifying which assembly to
# use, and each entry must match the keys of the toplevel 'assemblies'
# parameter. The 'zdrop' key specifies the value of the '-z' flag for dipcall
# (which for 'vcr-foo' will be invoked like '-z 20000,10000'; see dipcall
# documentation for details on this parameter).
#
# NOTE: Aside from the 'assemblies' parameter, snakemake will run the variant
# caller for each reference as determined by the stratifications used downstream
# by hap.py.

# variant_caller_runs:
#   vcr-foo:
#     # if we specified multiple assemblies above, this might be something like
#     # '[asm-foo, asm-boo]', which tells snakemake to run this configuration with
#     # both of these assemblies in parallel
#     assemblies: [asm-foo] 
#     zdrop: [20000, 10000]
#   vcr-boo:
#     assemblies: [asm-foo]
#     zdrop: null

################################################################################
# Hap.py
#
# We specify several configurations for which hap.py should be run. Each
# configuration requires an identifier starting with 'hpy-' that will be used to
# identify the output files.
#
# Within each configuration, snakemake will run hap.py once for each combination
# (eg the Cartesian product) of stratifications, benchmarks, and variant caller
# configuration, which are specified using the 'strats', 'benchmarks', and
# 'variant_caller_runs' parameters respectively. 'strats' is a list of mappings
# specifying the stratification set and the tsv file within the stratification
# set (see the 'stratifications' toplevel parameter above. The latter two
# parameters are lists that correspond to their respective configuration keys.
#
# The 'use_targeted' key will specify the if the .bed file output by the variant
# caller should be used for the '--target-regions' parameter of hap.py.

# happy_runs:
#   hpy-foo:
#     variant_caller_runs: [vcr-foo, vcr-boo]
#     benchmarks: [bmk-foo]
#     strats: [{bed: str-foo, tsv: boo}]
#     use_targeted: true
#   hpy-boo:
#     variant_caller_runs: [vcr-foo]
#     benchmarks: [bmk-foo]
#     strats: [{bed: str-foo, tsv: boo}]
#     use_targeted: false
